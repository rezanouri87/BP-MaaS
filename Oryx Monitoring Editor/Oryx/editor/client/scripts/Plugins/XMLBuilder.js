/* FileSaver.js *  A saveAs() FileSaver implementation. *  2014-05-27 * *  By Eli Grey, http://eligrey.com *  License: X11/MIT *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md *//*global self *//*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true *//*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */var saveAs = saveAs  // IE 10+ (native saveAs)  || (typeof navigator !== "undefined" &&      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))  // Everyone else  || (function(view) {	"use strict";	// IE <10 is explicitly unsupported	if (typeof navigator !== "undefined" &&	    /MSIE [1-9]\./.test(navigator.userAgent)) {		return;	}	var		  doc = view.document		  // only get URL when necessary in case Blob.js hasn't overridden it			// yet		, get_URL = function() {			return view.URL || view.webkitURL || view;		}		, save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")		, can_use_save_link = !view.externalHost && "download" in save_link		, click = function(node) {			var event = doc.createEvent("MouseEvents");			event.initMouseEvent(				"click", true, false, view, 0, 0, 0, 0, 0				, false, false, false, false, 0, null			);			node.dispatchEvent(event);		}		, webkit_req_fs = view.webkitRequestFileSystem		, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem		, throw_outside = function(ex) {			(view.setImmediate || view.setTimeout)(function() {				throw ex;			}, 0);		}		, force_saveable_type = "application/octet-stream"		, fs_min_size = 0		, deletion_queue = []		, process_deletion_queue = function() {			var i = deletion_queue.length;			while (i--) {				var file = deletion_queue[i];				if (typeof file === "string") { // file is an object URL					get_URL().revokeObjectURL(file);				} else { // file is a File					file.remove();				}			}			deletion_queue.length = 0; // clear queue		}		, dispatch = function(filesaver, event_types, event) {			event_types = [].concat(event_types);			var i = event_types.length;			while (i--) {				var listener = filesaver["on" + event_types[i]];				if (typeof listener === "function") {					try {						listener.call(filesaver, event || filesaver);					} catch (ex) {						throw_outside(ex);					}				}			}		}		, FileSaver = function(blob, name) {			// First try a.download, then web filesystem, then object URLs			var				  filesaver = this				, type = blob.type				, blob_changed = false				, object_url				, target_view				, get_object_url = function() {					var object_url = get_URL().createObjectURL(blob);					deletion_queue.push(object_url);					return object_url;				}				, dispatch_all = function() {					dispatch(filesaver, "writestart progress write writeend".split(" "));				}				// on any filesys errors revert to saving with object URLs				, fs_error = function() {					// don't create more object URLs than needed					if (blob_changed || !object_url) {						object_url = get_object_url(blob);					}					if (target_view) {						target_view.location.href = object_url;					} else {						window.open(object_url, "_blank");					}					filesaver.readyState = filesaver.DONE;					dispatch_all();				}				, abortable = function(func) {					return function() {						if (filesaver.readyState !== filesaver.DONE) {							return func.apply(this, arguments);						}					};				}				, create_if_not_found = {create: true, exclusive: false}				, slice			;			filesaver.readyState = filesaver.INIT;			if (!name) {				name = "download";			}			if (can_use_save_link) {				object_url = get_object_url(blob);				save_link.href = object_url;				save_link.download = name;				click(save_link);				filesaver.readyState = filesaver.DONE;				dispatch_all();				return;			}			// Object and web filesystem URLs have a problem saving in Google			// Chrome when			// viewed in a tab, so I force save with application/octet-stream			// http://code.google.com/p/chromium/issues/detail?id=91158			if (view.chrome && type && type !== force_saveable_type) {				slice = blob.slice || blob.webkitSlice;				blob = slice.call(blob, 0, blob.size, force_saveable_type);				blob_changed = true;			}			// Since I can't be sure that the guessed media type will trigger a			// download			// in WebKit, I append .download to the filename.			// https://bugs.webkit.org/show_bug.cgi?id=65440			if (webkit_req_fs && name !== "download") {				name += ".download";			}			if (type === force_saveable_type || webkit_req_fs) {				target_view = view;			}			if (!req_fs) {				fs_error();				return;			}			fs_min_size += blob.size;			req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {				fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {					var save = function() {						dir.getFile(name, create_if_not_found, abortable(function(file) {							file.createWriter(abortable(function(writer) {								writer.onwriteend = function(event) {									target_view.location.href = file.toURL();									deletion_queue.push(file);									filesaver.readyState = filesaver.DONE;									dispatch(filesaver, "writeend", event);								};								writer.onerror = function() {									var error = writer.error;									if (error.code !== error.ABORT_ERR) {										fs_error();									}								};								"writestart progress write abort".split(" ").forEach(function(event) {									writer["on" + event] = filesaver["on" + event];								});								writer.write(blob);								filesaver.abort = function() {									writer.abort();									filesaver.readyState = filesaver.DONE;								};								filesaver.readyState = filesaver.WRITING;							}), fs_error);						}), fs_error);					};					dir.getFile(name, {create: false}, abortable(function(file) {						// delete file if it already exists						file.remove();						save();					}), abortable(function(ex) {						if (ex.code === ex.NOT_FOUND_ERR) {							save();						} else {							fs_error();						}					}));				}), fs_error);			}), fs_error);		}		, FS_proto = FileSaver.prototype		, saveAs = function(blob, name) {			return new FileSaver(blob, name);		}	;	FS_proto.abort = function() {		var filesaver = this;		filesaver.readyState = filesaver.DONE;		dispatch(filesaver, "abort");	};	FS_proto.readyState = FS_proto.INIT = 0;	FS_proto.WRITING = 1;	FS_proto.DONE = 2;	FS_proto.error =	FS_proto.onwritestart =	FS_proto.onprogress =	FS_proto.onwrite =	FS_proto.onabort =	FS_proto.onerror =	FS_proto.onwriteend =		null;	view.addEventListener("unload", process_deletion_queue, false);	saveAs.unload = function() {		process_deletion_queue();		view.removeEventListener("unload", process_deletion_queue, false);	};	return saveAs;}(	   typeof self !== "undefined" && self	|| typeof window !== "undefined" && window	|| this.content));// `self` is undefined in Firefox for Android content script context// while `this` is nsIContentFrameMessageManager// with an attribute `content` that corresponds to the windowif (typeof module !== "undefined" && module !== null) {  module.exports = saveAs;} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {  define([], function() {    return saveAs;  });}if (!ORYX.Plugins)    ORYX.Plugins = new Object();ORYX.Plugins.XMLBuilder = Clazz.extend({    // Defines the facade    facade: undefined,	XMLDoc: undefined,	pn: undefined,	xmlContent: undefined,    // Constructor    construct: function (facade) {        this.facade = facade;        // Offers the functionality of undo        this.facade.offer({            name: 'XMLBuilder',            description: 'View XML',            icon: ORYX.PATH + "images/xml-icon.png",            group: ORYX.I18N.Save.group,            functionality: this.viewXML.bind(this),            isEnabled: function () {                return true;            }.bind(this),            index: 2        });				this.facade.offer({            name: 'XMLBuilder',            description: 'Download XML',            icon: ORYX.PATH + "images/xml-icon-d.png",            group: ORYX.I18N.Save.group,            functionality: this.downloadXML.bind(this),            isEnabled: function () {                return true;            }.bind(this),            index: 2        });    },		formulateAjaxCallURL: function (oldURL) {        // oldURL formate like		// http://hostname:port/oryx/editor;monitoring#/model/178/        // and need to be converted like		// http://hostname:port/backend/poem/model/176/json        var n = oldURL.lastIndexOf("/");        oldURL = oldURL.substr(0, n);        n = oldURL.lastIndexOf("/");        var modelNumber = oldURL.substr(n + 1);        var parser = document.createElement('a');        parser.href = oldURL;        return 'http://' + parser.host + '/backend/poem/model/' + modelNumber + '/json';    },			createXMLNodeAttributes: function(nodeAttributes, src){		var ruleName = nodeAttributes.ruleName.toLowerCase();		var ruleOperandData ;		switch (ruleName) {		case 'and':			if(src == 'P'){				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'AND'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};			} else			{				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'AND'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}						break;		case 'or':			if(src == 'P'){				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'OR'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};			} else {				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'OR'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};							}			break;		case 'xor':			if(src == 'P'){				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'XOR'},  {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};			}else {				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'XOR'},  {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}					break;		case 'not':			if(src == 'P'){				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'NOT'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};			}else {				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'NOT'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}					break;		case 'implies':			if(src == 'P'){				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Implies'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};			} else {				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Implies'}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}					break;		case 'segregationofduty':			if(src == 'P'){				if(nodeAttributes.ruleProperties['oryx-samerole'] == 'Yes'){					ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Segregation of Duty'}, {'name': 'LHSActor' , 'value': nodeAttributes.ruleProperties['oryx-lhsactor']},{'name': 'RHSActor' , 'value': nodeAttributes.ruleProperties['oryx-rhsactor']}, {'name': 'role' , 'value': nodeAttributes.ruleProperties['oryx-lhsrole']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']} ]};				}else{					ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Segregation of Duty'}, {'name': 'LHSActor' , 'value': nodeAttributes.ruleProperties['oryx-lhsactor']},{'name': 'RHSActor' , 'value': nodeAttributes.ruleProperties['oryx-rhsactor']}, {'name': 'LHSRole' , 'value': nodeAttributes.ruleProperties['oryx-lhsrole']} , {'name': 'RHSRole' , 'value': nodeAttributes.ruleProperties['oryx-rhsrole']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}]};				}						} else { // from child				if(nodeAttributes.ruleProperties['samerole'] == 'Yes'){					ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Segregation of Duty'}, {'name': 'LHSActor' , 'value': nodeAttributes.ruleProperties['lhsactor']},{'name': 'RHSActor' , 'value': nodeAttributes.ruleProperties['rhsactor']}, {'name': 'role' , 'value': nodeAttributes.ruleProperties['lhsrole']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']} ]};				}else{					ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Segregation of Duty'}, {'name': 'LHSActor' , 'value': nodeAttributes.ruleProperties['lhsactor']},{'name': 'RHSActor' , 'value': nodeAttributes.ruleProperties['rhsactor']}, {'name': 'LHSRole' , 'value': nodeAttributes.ruleProperties['lhsrole']} , {'name': 'RHSRole' , 'value': nodeAttributes.ruleProperties['rhsrole']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']} ]};				}						}							break;		case 'bindofduty':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Bind Of Duty'}, {'name': 'actor' , 'value': nodeAttributes.ruleProperties['oryx-actor']},{'name': 'role' , 'value': nodeAttributes.ruleProperties['oryx-role']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']} ]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Bind Of Duty'}, {'name': 'actor' , 'value': nodeAttributes.ruleProperties['actor']},{'name': 'role' , 'value': nodeAttributes.ruleProperties['role']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}]};												}		break;		case 'performedbyrole':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Performed By Role'}, {'name': 'role' , 'value': nodeAttributes.ruleProperties['oryx-role']}, {'name': 'person' , 'value': nodeAttributes.ruleProperties['oryx-person']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Performed By Role'}, {'name': 'role' , 'value': nodeAttributes.ruleProperties['role']}, {'name': 'person' , 'value': nodeAttributes.ruleProperties['person']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}  ]};												}		break;		case 'performedbyresource':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Performed By Resource'}, {'name': 'resource' , 'value': nodeAttributes.ruleProperties['oryx-resource']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']} ]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Performed By Resource'}, {'name': 'resource' , 'value': nodeAttributes.ruleProperties['resource']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']} ]};												}		break;		case 'waiting':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Waiting'}, {'name': 'actor' , 'value': nodeAttributes.ruleProperties['oryx-actor']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Waiting'}, {'name': 'actor' , 'value': nodeAttributes.ruleProperties['actor']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};												}		break;		case 'absence':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Absence'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Absence'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'resume':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Resume'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Resume'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'exactlytimes':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Exactly Times'}, {'name': 'numberOfTimes' , 'value': nodeAttributes.ruleProperties['oryx-numberoftimes']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Exactly Times'}, {'name': 'numberOfTimes' , 'value': nodeAttributes.ruleProperties['numberoftimes']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'atleasttimes':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'At Least Times'}, {'name': 'numberOfTimes' , 'value': nodeAttributes.ruleProperties['oryx-numberoftimes']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'At Least Times'}, {'name': 'numberOfTimes' , 'value': nodeAttributes.ruleProperties['numberoftimes']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};			}		break;		case 'atmosttimes':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'At Most Times'}, {'name': 'numberOfTimes' , 'value': nodeAttributes.ruleProperties['oryx-numberoftimes']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'At Most Times'}, {'name': 'numberOfTimes' , 'value': nodeAttributes.ruleProperties['numberoftimes']}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'exists':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Exists'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Exists'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'responsible':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Responsible'}, {'name': 'actor' , 'value': nodeAttributes.ruleProperties['oryx-actor']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Responsible'}, {'name': 'actor' , 'value': nodeAttributes.ruleProperties['actor']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};												}		break;		case 'sequence':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Sequence'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Sequence'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'precedes':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Precedes'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name' : 'isBefore', 'value' : nodeAttributes.ruleProperties['oryx-isbefore']} ]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Precedes'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name' : 'isBefore', 'value' : nodeAttributes.ruleProperties['isbefore']} ]};			}		break;		case 'response':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Response'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'timeSpan', 'value' : nodeAttributes.ruleProperties['oryx-timespan']}, {'name' : 'isBefore', 'value' : nodeAttributes.ruleProperties['oryx-isbefore']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Response'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'timeSpan', 'value' : nodeAttributes.ruleProperties['timespan']}, {'name' : 'isBefore', 'value' : nodeAttributes.ruleProperties['isbefore']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'onetooneprecedes':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'One To One Precedes'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}, {'name' : 'timeSpan', 'value' : nodeAttributes.ruleProperties['oryx-timespan']} ]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'One To One Precedes'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}, {'name' : 'timeSpan', 'value' : nodeAttributes.ruleProperties['timespan']} ]};			}				break;		case 'onetooneresponse':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'One To One Response'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'One To One Response'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}				break;		case 'next':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Next'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Next'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'until':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Until'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Until'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'weakuntil':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Weak Until'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['oryx-startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['oryx-endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Weak Until'}, {'name': 'startScope' , 'value': nodeAttributes.ruleProperties['startscope']}, {'name': 'endScope' , 'value': nodeAttributes.ruleProperties['endscope']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;		case 'relevant':			if(src == 'P'){						ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Relevant'}, {'name': 'period' , 'value': nodeAttributes.ruleProperties['oryx-period']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['oryx-processmodelid']}]};									} else { // from child				ruleOperandData = {'nodeName': 'rule', 'arrtibutes' : [{'name': 'type' , 'value': 'Relevant'}, {'name': 'period' , 'value': nodeAttributes.ruleProperties['period']}, {'name' : 'processModelId', 'value' :  nodeAttributes.ruleProperties['processmodelid']}]};			}		break;						}		return ruleOperandData;	},		addToXMLFile: function(params, parentNode, direction){		var node;		if(parentNode == undefined){			// create XML file			XMLDoc = document.implementation.createDocument(null, null, null);			pn = XMLDoc.createElement('monitoringRules'); 			node = XMLDoc.createElement(params.nodeName);			for(var i = 0; i < params.arrtibutes.length; i++){				var att = XMLDoc.createAttribute(params.arrtibutes[i].name);				att.value = params.arrtibutes[i].value;				node.setAttributeNode(att);			}			pn.appendChild(node);			}else{			// append to existing XML file			var dir;			if(direction === 'L'){				dir = XMLDoc.createElement("LHS");			}else{				dir = XMLDoc.createElement("RHS");			}			node = XMLDoc.createElement(params.nodeName);			for(var i = 0; i < params.arrtibutes.length; i++){				var att = XMLDoc.createAttribute(params.arrtibutes[i].name);				att.value = params.arrtibutes[i].value;				node.setAttributeNode(att);			}			dir.appendChild(node);			parentNode.appendChild(dir);					}				xmlContent = new XMLSerializer().serializeToString(pn);		return node;	}, 	    generateXML: function (ruleURL, pNode, direction) {		var ruleOperandData;		if( typeof ruleURL !== 'string'){			// parent rule			isContent = false;			this.facade.getCanvas().getChildNodes().each(function (shape) {				isContent = true;				var ruleName = shape.getStencil().title();				var lHSLink = shape.properties['oryx-subprocesslinkl'] || '';				var rHSLink = shape.properties['oryx-subprocesslinkr'] || '';				var cLink = shape.properties['oryx-subprocesslinkc'] || '';				var lName = shape.properties['oryx-leftname'] || '';				var rName = shape.properties['oryx-rightname'] || '' ;				var cName = shape.properties['oryx-nodename'] || '';				var ruleData = {						'ruleName': ruleName,						'ruleProperties': shape.properties					};				var parentNode = this.addToXMLFile(this.createXMLNodeAttributes(ruleData, 'P'));								if (lHSLink !== '') {					this.generateXML(lHSLink, parentNode, 'L');				}else if (lName !== '') {					ruleOperandData = {'nodeName': 'operand', 'arrtibutes' : [ {'name': 'name' , 'value': lName}]};						this.addToXMLFile(ruleOperandData, parentNode, 'L');				}								if (rHSLink !== '') {					this.generateXML(rHSLink, parentNode, 'R');				}else if (rName !== '') {					ruleOperandData = {'nodeName': 'operand', 'arrtibutes' : [ {'name': 'name' , 'value': rName}]};						this.addToXMLFile(ruleOperandData, parentNode, 'R');				}											if ( cLink !== '') {					this.generateXML(cLink, parentNode, 'L');				}else if (cName !== ''){					ruleOperandData = {'nodeName': 'operand', 'arrtibutes' : [ {'name': 'name' , 'value': cName}]};						this.addToXMLFile(ruleOperandData, parentNode, 'L');				}							}.bind(this));				} else {							var modelUrl = this.formulateAjaxCallURL(ruleURL);					new Ajax.Request(modelUrl, {				method: 'GET',				onSuccess: function (transport) {				   var childConfig = Ext.decode(transport.responseText);				   var ruleData = {						'ruleName': childConfig.childShapes[0].stencil.id,						'ruleProperties': childConfig.childShapes[0].properties					};					var parentNode = this.addToXMLFile(this.createXMLNodeAttributes(ruleData, 'C'), pNode, direction);					var lHSLink = ruleData.ruleProperties['subprocesslinkl'] || '';					var rHSLink = ruleData.ruleProperties['subprocesslinkr'] || '';					var cLink = ruleData.ruleProperties['subprocesslinkc'] || '';					var lName = ruleData.ruleProperties['leftname'] || '';					var rName = ruleData.ruleProperties['rightname'] || '';					var cName = ruleData.ruleProperties['nodename'] || '';										if (lHSLink !== '') {						this.generateXML(lHSLink, parentNode, 'L');					}else if (lName !== '') {						ruleOperandData = {'nodeName': 'operand', 'arrtibutes' : [ {'name': 'name' , 'value': lName}]};							this.addToXMLFile(ruleOperandData, parentNode, 'L');					}													if ( rHSLink !== '') {						this.generateXML(rHSLink, parentNode, 'R');					}else if (rName !== ''){						ruleOperandData = {'nodeName': 'operand', 'arrtibutes' : [ {'name': 'name' , 'value': rName}]};							this.addToXMLFile(ruleOperandData, parentNode, 'R');					}										if (  cLink !== '') {						this.generateXML(cLink, parentNode, 'L');					}else if (cName !== ''){						ruleOperandData = {'nodeName': 'operand', 'arrtibutes' : [ {'name': 'name' , 'value': cName}]};							this.addToXMLFile(ruleOperandData, parentNode, 'L');					}					}.bind(this),				onFailure: function (transport) {					Ext.Msg.alert('Connection Error', 'Cannot connect to backend');									}.bind(this)			});					}	            },		viewXML: function(param){		this.generateXML(param);		setTimeout(function(){			if(isContent == true){				var uriContent = "data:application/xml," + encodeURIComponent(xmlContent);				var newWindow = window.open(uriContent,'_blank','toolbar=0,location=0,directories=0,status=0, scrollbars=1, resizable=1, copyhistory=1, menuBar=1, width=640,height=480, left=50, top=50');																}					},3000);	},	downloadXML: function(param){		this.generateXML(param);		setTimeout(function(){									if(isContent == true){				var blob = new Blob([xmlContent], {type: "application/xhtml+xml;charset=utf-8"});				saveAs(blob, "monitoring rule.xml");			}			},3000);	}});